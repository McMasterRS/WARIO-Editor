from pipeline.Node import Node
from parselmouth.praat import call
from toolkits.Voicelab.VoicelabNode import VoicelabNode

###################################################################################################
# MEASURE JITTER NODE
# WARIO pipeline node for measuring the jitter of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class MeasureJitterNode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # initialize defaults
        self.args = {
            'floor': self.pitch_floor, # by default pitch floor is calculated dynamically when this node is run
            'ceiling': self.pitch_ceiling, # by default pitch ceiling is calculated dynamically when this node is run
            'start_time': 0,
            'end_time': 0,
            'shortest_period': 0.0001,
            'longest_period': 0.02,
            'maximum_period_factor': 1.3
        }
    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################

    def process(self):

        'measure jitter'

        voice = self.args['voice']

        # Call the provided pitch bounds functions
        pitch_ceiling = self.args['ceiling'](voice)
        pitch_floor = self.args['floor'](voice)

        start_time = self.args['start_time']
        end_time = self.args['end_time']
        shortest_period = self.args['shortest_period']
        longest_period = self.args['longest_period']
        max_period_factor = self.args['maximum_period_factor']

        point_process: object = call(voice, "To PointProcess (periodic, cc)",
            pitch_floor,
            pitch_ceiling)

        local_jitter: float = call(point_process, "Get jitter (local)",
            start_time,
            end_time,
            shortest_period,
            longest_period,
            max_period_factor)

        # todo change this so that it accepts defaults unless user is in advanced mode
        localabsolute_jitter: float = call(point_process, "Get jitter (local, absolute)",
            start_time,
            end_time,
            shortest_period,
            longest_period,
            max_period_factor)

        rap_jitter: float = call(point_process, "Get jitter (rap)",
            start_time,
            end_time,
            shortest_period,
            longest_period,
            max_period_factor)

        ppq5_jitter: float = call(point_process, "Get jitter (ppq5)",
            start_time,
            end_time,
            shortest_period,
            longest_period,
            max_period_factor)

        ddp_jitter: float = call(point_process, "Get jitter (ddp)",
            start_time,
            end_time,
            shortest_period,
            longest_period,
            max_period_factor)

        return {
            'Local Jitter': local_jitter,
            'Local Absolute Jitter': localabsolute_jitter,
            'RAP Jitter': rap_jitter,
            'ppq5 Jitter': ppq5_jitter,
            'ddp Jitter': ddp_jitter
        }