from pipeline.Node import Node
import numpy as np
import seaborn as sns
import parselmouth
from parselmouth.praat import call
import matplotlib.pyplot as plt

from toolkits.Voicelab.VoicelabNode import VoicelabNode


###################################################################################################
# VISUALIZE VOICE NODE
# WARIO pipeline node for visualizing a voice as a spectrogram.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class VisualizeVoiceNode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        self.args = {
            'window_length': 0.05,
            'colour_map': ('copper', ['binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',
               'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',
               'hot', 'afmhot', 'gist_heat', 'copper'])
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################
    def process(self):

        voice = self.args['voice']
        window_length = self.args['window_length']
        colour_map = self.args['colour_map']
        figure, host = plt.subplots()

        if isinstance(colour_map, tuple):
            colour_map = colour_map[0]

        pre_emphasized_voice = voice.copy()
        pre_emphasized_voice.pre_emphasize()

        spectrogram = pre_emphasized_voice.to_spectrogram(window_length=window_length, maximum_frequency=8000)
        x, y = spectrogram.x_grid(), spectrogram.y_grid()

        sg_db = 10 * np.log10(spectrogram.values)
        vgmin_value = sg_db.max() - 70
        host.pcolormesh(x, y, sg_db, vmin=vgmin_value, cmap=colour_map)
        host.set_ylim([spectrogram.ymin, spectrogram.ymax])
        # host.set_xlabel("Time [s]", labelpad=10)
        # host.set_ylabel("Frequency [Hz]", labelpad=10)

        host.set_xlabel("Time [s]")
        host.set_ylabel("Frequency [Hz]")

        host.yaxis.label.set_color('w')
        host.set_xlim([self.args['voice'].xmin, self.args['voice'].xmax])
        sns.set()
        plt.tight_layout()
        plt.autoscale()
        plt.subplots_adjust(right=0.8)
        # plt.subplots_adjust(right=2)

        return {
            'figure': figure,
            'host': host,
            'spectrogram': spectrogram
        }