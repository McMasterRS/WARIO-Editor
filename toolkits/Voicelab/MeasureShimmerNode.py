from pipeline.Node import Node
from parselmouth.praat import call
from toolkits.Voicelab.VoicelabNode import VoicelabNode
###################################################################################################
# MEASURE SHIMMER NODE
# WARIO pipeline node for measuring the shimmer of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class MeasureShimmerNode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.args = {
            'floor': self.pitch_floor,
            'ceiling': self.pitch_ceiling,
            'start_time': 0,
            'end_time': 0,
            'shortest_period': 0.0001,
            'longest_period': 0.02,
            'maximum_period_factor': 1.3,
            'maximum_amplitude': 1.6
        }

    def process(self):
        'shimmer'

        sound = self.args['voice']

        floor, ceiling = self.pitch_bounds(sound)

        point_process: object = call(sound, "To PointProcess (periodic, cc)",
            self.args['floor'](sound),
            self.args['ceiling'](sound))

        local_shimmer: float = call([sound, point_process], "Get shimmer (local)",
            self.args['start_time'],
            self.args['end_time'],
            self.args['shortest_period'],
            self.args['longest_period'],
            self.args['maximum_period_factor'],
            self.args['maximum_amplitude'])

        localdb_shimmer: float = call([sound, point_process], "Get shimmer (local_dB)",
            self.args['start_time'],
            self.args['end_time'],
            self.args['shortest_period'],
            self.args['longest_period'],
            self.args['maximum_period_factor'],
            self.args['maximum_amplitude'])

        apq3_shimmer: float = call([sound, point_process], "Get shimmer (apq3)",
            self.args['start_time'],
            self.args['end_time'],
            self.args['shortest_period'],
            self.args['longest_period'],
            self.args['maximum_period_factor'],
            self.args['maximum_amplitude'])

        aqpq5_shimmer: float = call([sound, point_process], "Get shimmer (apq5)",
            self.args['start_time'],
            self.args['end_time'],
            self.args['shortest_period'],
            self.args['longest_period'],
            self.args['maximum_period_factor'],
            self.args['maximum_amplitude'])

        apq11_shimmer: float = call([sound, point_process], "Get shimmer (apq11)",
            self.args['start_time'],
            self.args['end_time'],
            self.args['shortest_period'],
            self.args['longest_period'],
            self.args['maximum_period_factor'],
            self.args['maximum_amplitude'])

        dda_shimmer: float = call([sound, point_process], "Get shimmer (dda)",
            self.args['start_time'],
            self.args['end_time'],
            self.args['shortest_period'],
            self.args['longest_period'],
            self.args['maximum_period_factor'],
            self.args['maximum_amplitude'])

        return {
            'local_shimmer': local_shimmer,
            'localdb_shimmer': localdb_shimmer,
            'apq3_shimmer': apq3_shimmer,
            'aqpq5_shimmer': aqpq5_shimmer,
            'apq11_shimmer': apq11_shimmer,
            'dda_shimmer': dda_shimmer,
        }