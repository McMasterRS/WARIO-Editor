from pipeline.Node import Node
from parselmouth.praat import call
from toolkits.Voicelab.VoicelabNode import VoicelabNode
from toolkits.Voicelab.MeasureFormantNode import MeasureFormantNode

###################################################################################################
# MEASURE VOCAL TRACT ESTIMATES NODE
# WARIO pipeline node for estimating the vocal tract of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class MeasureVocalTractEstimatesNode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.args = {
            'formants': self.measure_formants
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################
    def process(self):
        'vocal_tract_estimates_mean'

        voice = self.args['voice']
        formants = self.args['formants'](voice)

        f1, f2, f3, f4 = formants
        formant_dispersion = (f4 - f1) / 3
        average_formant = (f1 + f2 + f3 + f4) / 4
        geometric_mean = (f1 * f2 * f3 * f4) ** 0.25

        fitch_vtl = (
            (1 *(35000 / (4 * f1))) +
            (3 * (35000 / (4 * f2))) +
            (5 * (35000 / (4 * f3))) +
            (7 * (35000 / (4 * f4)))) / 4

        # Reby Method
        xysum = (0.5 * f1) + (1.5 * f2) + (2.5 * f3) + (3.5 * f4)
        xsquaredsum = (0.5 ** 2) + (1.5 ** 2) + (2.5 ** 2) + (3.5 ** 2)
        delta_f = xysum / xsquaredsum
        vtl_delta_f = 35000 / (2 * delta_f)

        return {
            'formant_dispersion': formant_dispersion,
            'average_formant': average_formant,
            'geometric_mean': geometric_mean,
            'fitch_vtl': fitch_vtl,
            'delta_f': delta_f,
            'vtl_delta_f': vtl_delta_f
        }

    def measure_formants(self, voice):
        measure_formants = MeasureFormantNode('Measure Formants')
        measure_formants.args['voice'] = voice
        results = measure_formants.process()
        self.cached = { voice: results['Formant Means'] }
        return results['Formant Means']
