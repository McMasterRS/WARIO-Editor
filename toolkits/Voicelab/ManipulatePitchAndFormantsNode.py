from pipeline.Node import Node
from parselmouth.praat import call
from toolkits.Voicelab.VoicelabNode import VoicelabNode

###################################################################################################
# MANIPULATE PITCH AND FORMANTS NODE
# WARIO pipeline node for manipulating voice formants and pitch
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class ManipulatePitchAndFormantsNode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.args = {
            "unit": "ERB",
            "pitch_factor": -0.5,
            "formant_factor": 0.25
        }

    def process(self):

        sound = self.args['voice']
        unit = self.args['unit']
        formant_factor = self.args['formant_factor']
        pitch_factor = self.args['pitch_factor']
        duration = self.args['duration']

        f0min, f0max = pitch_bounds(sound)

        pitch_expression = "self" + str(pitch_factor)

        # formant factor is in format e.g. down 5%
        vtl_factor = 1 - formant_factor # This makes vocal tract 5% longer by making formants shift down 5%
        vtl_factor_percent = round(vtl_factor*100)
        sampling_rate = call(sound, "Get sample rate")

        # create Pitch & Manipulation objects
        pitch = call(sound, "To Pitch", 0.001, f0min, f0max)

        # pitch = sound.to_pitch(0.001, f0min, f0max)
        manipulation = call([pitch, sound], "To Manipulation")

        # apply the appropriate transformation to the Pitch object
        # includes vtfactor because of subsequent rescaling
        pitch_formula = pitch_expression + '*' + str(vtl_factor)
        pitch = call(pitch, "Formula", pitch_formula)

        # turn it into a PitchTier and place it into the Analysis object
        pitch_tier = call([manipulation, pitch], "Down to pitch tier")
        manipulation = call([pitch_tier, manipulation], "Replace pitch tier")

        # change to new duration
        DurationTier = call(sound, "Create DurationTier", "DurationTier", 0, duration)
        DurationTier.add_point(0, 1/vtl_factor)
        manipulation = call([DurationTier, manipulation], "Replace duration tier")
        manipulated_sound = call(manipulation, "Get resynthesis (overlap-add)")
        manipulated_sound.override_sampling_frequency(sampling_rate)
        manipulated_sound.scale_intensity(70)

        # manipulated_pitch_and_formant_name = sound_name + \
        #     f"_formant_manipulated_pitch_{pitch_factor}" \
        #     f"_formants_{vtl_factor_percent}.wav"
        # manipulated_sound.save(manipulated_pitch_and_formant_name, "WAV")
        
        return {
            'manipulated_sound': manipulated_sound
        }