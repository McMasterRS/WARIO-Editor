from pipeline.Node import Node
from parselmouth.praat import call
from toolkits.Voicelab.VoicelabNode import VoicelabNode

###################################################################################################
# MANIPULATE PITCH NODE
# WARIO pipeline node for manipulating the pitch of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class ManipulatePitchNode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.args = {
            'unit': "ERB",
            'factor': -0.5,
            'pitch bounds': 12
        }
    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################

    def process(self):
        
        sound = self.args['voice']
        factor = self.args['factor']
        unit = self.args['unit']

        f0min, f0max = self.pitch_bounds(sound)

        manipulation = call(sound, "To Manipulation", 0.001, f0min, f0max)
        pitch_tier = call(manipulation, "Extract pitch tier")
        call(pitch_tier, "Shift frequencies", f0min, f0max, factor, unit)
        call([pitch_tier, manipulation], "Replace pitch tier")
        manipulated_sound = call(manipulation, "Get resynthesis (overlap-add)")
        manipulated_sound.scale_intensity(70)

        return {
            'voice': manipulated_sound
        }