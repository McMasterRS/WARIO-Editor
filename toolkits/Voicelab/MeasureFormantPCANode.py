from pipeline.Node import Node
from parselmouth.praat import call
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

import pandas as pd

from toolkits.Voicelab.VoicelabNode import VoicelabNode
from toolkits.Voicelab.MeasureFormantNode import MeasureFormantNode

###################################################################################################
# MEASURE FORMANT PCA NODE
# WARIO pipeline node for performing principle component analysis on the formants of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################


class MeasureFormantPCANode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.cached = {}

        # The default values are generated by measuring the jitter of the voice
        self.args = {
            'formant_means': lambda voice: self.measure_formant(voice)['formant_means'],
        }

    # Takes a dataframe with f1-4
    def process(self):
        ""

        voice = self.args['voice']
        f1, f2, f3, f4 = self.args['formant_means'](voice)
        formant_values = pd.DataFrame(data={
            'f1': f1,
            'f2': f2,
            'f3': f3,
            'f4': f4
        }, index=[0])

        # PCA of the formants
        x = formant_values
        x = StandardScaler().fit_transform(x)
        
        # Run the PCA
        pca = PCA(n_components=1)
        principal_components = pca.fit_transform(x)

        return {
            'principal_components': principal_components
        }

    def measure_formant(self, voice):
        if voice not in self.cached:
            measure_formant = MeasureFormantNode('Measure Formant')
            measure_formant.args['voice'] = voice
            results = measure_formant.process()
            self.cached = { voice: results }
            return results
        return self.cached[voice]
