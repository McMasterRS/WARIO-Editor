from pipeline.Node import Node
import numpy as np
import seaborn as sns
import parselmouth
from parselmouth.praat import call
import matplotlib.pyplot as plt

from toolkits.Voicelab.VoicelabNode import VoicelabNode
from toolkits.Voicelab.MeasurePitchNode import MeasurePitchNode
from toolkits.Voicelab.MeasureIntensityNode import MeasureIntensityNode


###################################################################################################
# VISUALIZE PITCH NODE
# WARIO pipeline node for visualizing the pitch of a voice on a plot.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class VisualizePitchNode(VoicelabNode):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # Default argument values
        self.args = {

            # Pitch and intensity are both calculated dynamically using the voice that is processed
            # Other non 
            'pitch': self.measure_pitch,
            'intensity': self.measure_intensity,
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################
    def process(self):

        voice = self.args['voice']
        figure = self.args['figure']

        pitch = self.args['pitch']
        intensity = self.args['intensity']

        if callable(pitch):
            pitch = pitch(voice)
        
        if callable(intensity):
            intensity = intensity(voice)

        host = figure.axes[0]

        axis = host.twinx()
        pitch_values = pitch.selected_array['frequency']
        sample_times = pitch.xs()

        for i, time in enumerate(sample_times):
            intensity.values.T[intensity.values.T < 50] = np.nan
            intensity_value = call(intensity, "Get value at time", time, "cubic")
            if intensity_value < 50:
                pitch_values[i] = 0

        pitch_values[pitch_values == 0] = np.nan
        axis.plot(pitch.xs(), pitch_values, linestyle='-', color='k', linewidth=6)
        axis.plot(pitch.xs(), pitch_values, linestyle='-', color='w', linewidth=5)
        axis.plot(pitch.xs(), pitch_values, linestyle='-', color='b', linewidth=4)
        axis.grid(False)
        pitch_max = 500
        axis.set_ylim(0, pitch_max)
        axis.set_ylabel("Fundamental frequency [Hz]", labelpad=15)
        axis.yaxis.label.set_color('b')

        return {
            'figure': figure,
            'host': host,
            # 'axis': axis,
        }
    
    def measure_pitch(self, voice):
        measure_pitch = MeasurePitchNode('Measure Pitch')
        measure_pitch.args['voice'] = voice
        results = measure_pitch.process()
        self.cached = { voice: results['Pitch'] }
        return results['Pitch']

    def measure_intensity(self, voice):
        measure_intensity = MeasureIntensityNode('Measure Intensity')
        measure_intensity.args['voice'] = voice
        results = measure_intensity.process()
        self.cached = { voice: results['Voice Intensity'] }
        return results['Voice Intensity']

