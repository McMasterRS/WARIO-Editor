from pipeline.Node import Node
import numpy as np
import seaborn as sns
import parselmouth
from parselmouth.praat import call
import matplotlib.pyplot as plt

from toolkits.Voicelab.VoicelabNode import VoicelabNode


###################################################################################################
# VISUALIZE PITCH NODE
# WARIO pipeline node for visualizing the pitch of a voice on a plot.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class VisualizePitchNode(VoicelabNode):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.args = {}

    def process(self):

        pitch = self.args['pitch']
        intensity = self.args['intensity']

        # use the provided plot if one is provided, otherwise create a new one
        figure, host = self.args['figure'], self.args['host'] if ('figure' in self.args and 'host' in self.args) else plt.subplots()

        axis = host.twinx()
        pitch_values = pitch.selected_array['frequency']
        sample_times = pitch.xs()

        for i, time in enumerate(sample_times):
            intensity.values.T[intensity.values.T < 50] = np.nan
            intensity_value = call(intensity, "Get value at time", time, "cubic")
            if intensity_value < 50:
                pitch_values[i] = 0

        pitch_values[pitch_values == 0] = np.nan
        axis.plot(pitch.xs(), pitch_values, linestyle='-', color='k', linewidth=6)
        axis.plot(pitch.xs(), pitch_values, linestyle='-', color='w', linewidth=5)
        axis.plot(pitch.xs(), pitch_values, linestyle='-', color='b', linewidth=4)
        axis.grid(False)
        pitch_max = 500
        axis.set_ylim(0, pitch_max)
        axis.set_ylabel("Fundamental frequency [Hz]")
        axis.yaxis.label.set_color('b')

        return {
            'figure': figure,
            'host': host,
            'axis': axis,
        }