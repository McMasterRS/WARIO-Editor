from pipeline.Node import Node
import numpy as np
import seaborn as sns
import parselmouth
from parselmouth.praat import call
import matplotlib.pyplot as plt

from toolkits.Voicelab.VoicelabNode import VoicelabNode
from toolkits.Voicelab.MeasureIntensityNode import MeasureIntensityNode
from toolkits.Voicelab.MeasureFormantNode import MeasureFormantNode


###################################################################################################
# VISUALIZE FORMANT NODE
# WARIO pipeline node for visualizing using a plot the formants of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################

class VisualizeFormantNode(VoicelabNode):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.args = {}

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################
    def process(self):
        ''

        figure = self.args['figure']
        voice = self.args['voice']

        host = figure.axes[0]
        axis = host.twinx()

        max_formant = self.formants_praat_manual(voice)
        number_of_formants = 5
        time_step = 0.0025
        window_length = 0.025
        pre_emphasis_dB = 50
        formants = call(voice, "To Formant (burg)", time_step, number_of_formants, max_formant, window_length,
                        pre_emphasis_dB)
        sample_times = formants.xs()
        intensity = voice.to_intensity()
        for i in range(4):  # How many formants do you want?
            formant_values = parselmouth.praat.call(formants, "To Matrix", i + 1).values[0, :]
            j = 0
            for time in sample_times:
                j += 1
                intensity_value = parselmouth.praat.call(intensity, "Get value at time", time, "cubic")
                if intensity_value < 50:
                    formant_values[j] = 0
            formant_values[formant_values == 0] = np.nan
            axis.scatter(sample_times, formant_values, c='w', linewidth=3, marker='o', s=1)
            axis.scatter(sample_times, formant_values, c='r', linewidth=1, s=1)
            axis.grid(False)

        return {
            'axis': axis
        }

    def formants_praat_manual(self, voice):
        pitch = call(voice, "To Pitch", 0.0, 50, 500)  # check pitch to set formant settings
        mean_f0 = call(pitch, "Get mean", 0, 0, "Hertz")
        if 170 <= mean_f0 <= 300:
            max_formant = 5500
        elif mean_f0 < 170:
            max_formant = 5000
        else:
            max_formant = 8000
        return max_formant
